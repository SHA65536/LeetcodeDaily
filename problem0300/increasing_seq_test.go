package problem0300

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

type Result struct {
	Input    []int
	Expected int
}

var Results = []Result{
	/*{[]int{10, 9, 2, 5, 3, 7, 101, 18}, 4},
	{[]int{0, 1, 0, 3, 2, 3}, 4},
	{[]int{7, 7, 7, 7, 7, 7, 7}, 1},*/
	{[]int{837, 734, -1307, 1087, -1937, 1086, -1712, 714, 1863, 807, -955, 1034, -1143, 1661, -965, 1426, -363, -1903, 1324, 225, 599, 934, -795, -1227, -1703, 397, -615, -21, 482, 1023, 841, -1210, 1508, -99, 1815, -74, -1077, -684, -604, -312, -1928, -653, 1273, -1866, -1702, 1528, 1155, 779, -1339, -1004, -730, -1018, -878, 967, 1515, -1457, -995, -1908, -1724, 873, 1978, -62, -309, -1880, 285, -1802, 1764, 624, 1255, -60, 775, 851, 309, -1024, 208, -687, 1389, -1515, 1174, 783, -300, -134, -583, -924, -1687, 589, 371, -62, -1156, 1571, -1850, 103, 888, 361, -1492, -849, -821, 1058, 1957, -103, -1008, -301, 727, 1116, 1574, 1352, -1498, -359, -1758, 1391, -1356, 522, -1331, 149, -258, -360, 592, -1798, 1350, 26, 300, -119, 610, -477, -212, 147, -1270, 1294, 1983, -1039, -1371, -650, 1787, 432, 612, 1506, -1077, -1303, 1751, 1174, -309, -1137, 699, -659, -1764, -867, 1476, 1538, -977, 1302, -1381, 1310, -1234, -210, -94, 1511, 181, 1256, 1944, -1644, -985, -558, 341, -1157, 1206, 184, -1868, 687, 721, 784, -744, -941, 1855, 244, 383, -795, -1145, 1405, 1339, 790, -75, -830, 1334, -561, 1083, 825, -1017, -426, 17, 388, -849, 455, -379, 223, 704, -1850, 293, 1668, -926, 1812, -1788, 651, 1617, -1308, -14, 1499, 536, -564, 777, -925, -69, 950, 616, -179, 1012, 628, 159, 1414, -1198, -1766, -717, 651, -1181, 66, -618, -1830, -946, -413, 163, -1923, -173, -1977, 1959, -798, 729, 1557, -120, 512, -8, 325, 1600, -661, -1085, -107, 271, -847, 887, -940, -1008, 949, 1193, -217, 872, -1882, 1343, 630, -1618, 1354, 417, 1133, 988, -1914, -1315, 1839, -1181, -1655, 1844, -313, -1074, -145, 198, 963, -1240, -583, -1994, -1838, 1390, -90, -642, -1090, 272, 165, 1834, 1778, 1858, 512, 1257, -1970, 351, -558, 596, 1231, -389, 1298, 1494, -1136, -601, -1801, 150, 1627, -1124, -1511, -139, -1761, 801, -1911, 906, 1014, -107, -1451, 368, 1735, -1834, 1400, -345, -544, 390, -833, 910, 864, 528, -273, -354, 1946, 1928, 1241, -1113, 1050, 680, -871, 1648, 776, -821, -1324, 1852, -1256, -1529, 1375, 1737, -168, -279, -215, 320, 446, 347, -1749, -509, -759, 410, 1132, -1152, -492, 267, -580, 1632, 1418, 549, -1222, -1921, -140, 160, 1756, 1888, -725, -472, -1310, 391, -430, -1155, -231, 303, -314, 774, 584, 338, 1500, 1957, 1669, 931, 1778, 1864, -1289, 193, -1450, 399, 925, 1051, -1926, -1508, 1907, 1601, -176, 627, -1495, -1868, 1754, -1086, -1867, -1618, 525, 1400, 1542, 1700, 430, -532, 1738, -1459, -1067, -731, -917, 1631, 994, -1553, -1488, -1629, -881, 763, 937, 1388, 1465, 1643, -1459, 687, -1216, -519, 1677, 348, 747, -1096, -402, -1678, 509, -562, -1146, -772, -58, 1764, -1311, -70, -1537, -1256, 550, -1003, 358, 1196, -482, 528, 1153, -283, 753, 1316, 1739, -1526, -1036, 39, 1232, 671, 1299, -1265, -1716, 415, 772, 7, 1751, -1957, 1773, 636, -97, -1411, -1102, -1046, 1528, 156, -433, -1580, -1369, 647, -113, -1102, 752, -732, -285, -1205, -703, 643, -1153, -254, 439, -1369, 1979, 1191, -1445, 706, -787, -1059, 1543, -1750, 1073, 1747, -1604, -733, -1325, -1993, 383, -110, -1826, -23, 522, 245, 688, 1375, -254, -1251, -1669, 1401, -742, -1156, -53, -763, -898, 933, 1340, 776, 485, 335, -405, 444, 1228, 1209, 1603, 997, -908, -1175, -1674, 504, 327, -316, 1142, -655, 1252, -1401, -310, 449, 797, -961, -810, -1856, 1329, -438, -537, -321, -68, -1424, -1313, -11, -1925, -693, 1066, -960, -696, 1742, 1811, -872, 1517, -343, 154, 850, 208, 873, 1520, -432, -1409, 1898, -320, -1666, -341, -31, -304, 387, 1749, 1981, -1034, -445, 1451, 703, -511, 392, -29, 107, 428, 1417, -932, 74, 1941, 1288, 1497, 459, 795, -458, 104, 1094, -789, 1454, 1422, 1698, -762, -592, 199, 1537, -445, -1944, 432, 1301, 1480, -719, 906, 216, -11, 2000, 1565, 1292, -1356, 1531, 1445, 416, -1238, -1103, -456, 1291, -1488, 1345, -1403, -604, -1677, 901, -839, -1058, -608, 787, -553, -814, 1415, -1461, -1517, 349, 805, -1510, -33, -929, 27, 774, 68, -142, -1625, 642, -1074, 295, 1748, 1743, -388, 1932, 994, -1346, -709, 951, 683, 1067, -880, 489, 235, -1152, -2000, 1918, -383, 1767, 1088, -1529, 1572, -467, -504, 42, 1853, -1531, -1178, -1826, -855, 1932, 1787, 1538, 460, 1034, 642, 1401, 665, 131, -1551, 508, -1194, -220, -1350, -235, -1578, -1297, 88, 1913, -817, -1401, -1161, -934, -1095, 989, -115, 622, 125, -551, -1241, -557, -1403, -1320, -198, 1513, 1608, -375, -1031, -102, -731, 851, -1467, 1129, -859, -587, -1976, 968, 1767, 1194, -1087, -943, -1121, 1301, -643, -1998, -258, 1163, -1413, 1393, -1232, -1777, 1382, 956, 68, -463, 503, 1336, -446, -1333, 36, 45, -284, -109, 1011, -724, 706, -1986, -1633, -515, 771, -1067, -1522, -1292, -467, -385, -672, 1695, -1774, -1094, -765, -329, -905, -1416, 1538, -1877, 840, -1042, 440, -1298, 949, -1389, 662, 495, 1752, -1157, -301, -244, 1703, 756, 1345, -1184, 1529, -1038, -670, 767, -1386, 844, 21, 579, -354, 419, 1892, 1998, 897, 639, -472, 513, 789, -1983, 282, -1730, 131, -277, 1948, -1835, -1123, -495, -1767, -1811, -498, -1555, -112, 1485, 987, -1661, -582, 256, -1814, 1264, -1787, -549, -1247, -1533, -504, 691, -1442, -493, -541, -1447, -1971, -1902, 383, 194, -332, -1773, 502, -1491, -1649, -248, -829, -1595, -922, 1233, -1390, -1997, -1764, 1620, -1299, 218, -258, -1797, 56, -347, 787, 1039, -128, 1017, 618, 188, -687, 939, 754, -833, 60, -1623, -32, 601, 452, 182, -1777, -694, -29, 612, -530, -1336, 1793, -1074, 806, 1885, 1855, -1492, 1118, 5, -329, 373, 930, 63, 368, 902, -463, -1786, 1957, -1261, -1971, 1697, 1887, -735, -1460, -8, 904, -1102, 1576, 1838, 1194, -284, -1489, 804, -705, 888, -1742, 1544, 1251, -1746, -95, 426, 448, -942, -95, -510, -34, -547, -1750, -1200, 1680, -1794, -621, -1974, 304, 244, 384, -1638, -848, 1963, -528, -1206, -124, 1142, -1734, -1018, -23, 1247, -1712, 1506, 662, -1545, -1932, 989, 396, 1981, 1695, 1675, -423, 1087, 634, -1314, 1577, 711, -1954, -1576, 879, -1922, 1519, 1270, 34, 1896, -1201, -1817, -1016, 1310, 1756, -483, -1748, -496, 448, 717, 360, -970, -7, -1936, -1746, 1242, 1263, 184, 1718, 27, 705, 429, 1908, -627, 1651, -1873, -631, -1689, 1289, 1445, -1811, 1449, -1993, 1634, 914, -1842, 1732, 155, 1907, 1774, -1815, -1998, 1666, -1156, -1955, 1424, 1685, -226, 174, 1755, 445, -1335, 680, -864, 1764, 1977, 1315, 1579, 1852, -1202, -1370, 1655, -1079, -1556, -1080, 377, -1353, 793, 524, 1206, -1347, 1199, -1580, -646, 601, 1018, 1810, 399, 1676, 499, 39, -405, 1992, 1855, -1730, -1747, -380, 1093, 1141, -426, -454, 327, 866, -1867, 1511, 1974, 849, -1121, 744, 67, -1205, -734, 164, 848, 1245, -1723, 1922, 1311, 1888, 585, 1674, 1036, 993, 190, 1806, 1420, -1992, 1315, -1189, 1122, -774, 1748, 169, 1475, 181, 1794, -1311, -1622, -516, -1417, 439, 455, 951, 1364, -923, -1122, -1254, 614, 495, -1109, -1718, 1623, -1449, 1768, -1226, -346, -374, 388, -575, -1662, -825, -1488, 1796, -840, 1905, -362, -704, -1059, 45, 957, -1247, 1195, -468, 1881, 171, 1208, -225, -1120, 507, 1598, 1437, 1548, -1558, -946, 1789, -2000, 267, -1130, 1005, 831, -1626, 313, 1818, -1373, -718, 1487, -1088, 37, 1780, -1712, 1208, -959, -1661, 1828, -1957, 1502, 427, 419, 433, -1410, -1615, -306, -1885, -1806, -1656, 289, 60, -686, -229, -1786, 1625, 1199, -967, 1563, -422, -936, -253, 161, 83, -1075, -76, -691, 1798, 878, -494, 1925, -524, 1754, -1144, -995, -803, -433, -534, 1896, 1604, -1377, -797, 520, -52, 747, -363, 110, -709, -955, -524, 948, 377, 1814, -1410, 1552, -1826, -468, -478, 513, 949, 159, -1984, -650, -1638, 1187, -932, -37, 611, 509, 1683, -404, 603, 1955, -1076, 438, -860, 441, -1421, 59, 1241, -950, -19, -398, -359, 1326, 1038, -1594, 1431, 356, 1690, -1413, 690, 1840, 303, 159, 1859, -25, -771, -1369, 1821, 1867, -726, -1323, -1037, 452, -216, 1496, 602, -828, 1145, -220, -1166, 1666, 828, 1136, 629, -27, -1757, -1078, -410, 1747, 1644, -1825, 1854, 1881, -445, 150, -576, 1985, 253, 1468, -1121, 1019, -252, -1502, 1231, 1848, -345, -731, -849, 326, -1333, 124, -1145, -1488, 703, -557, -1661, 811, -1616, -1698, -1116, 1317, -1956, 3, -1298, 1780, 1081, 1827, -1055, -1767, -642, -166, -1042, -1153, 418, 645, 1106, 739, 177, 177, -1391, 1835, -956, -1922, -667, 1522, -786, 657, 87, 306, 947, 1738, -1787, 488, 625, -376, -407, 192, -1100, 243, 230, -1771, -1091, -700, 717, 1993, 275, -1076, -526, -364, 1540, -1047, 1218, 489, 1098, 1233, 330, -1842, 1800, -1524, 1078, 1322, 1000, 1856, -559, -989, -42, -629, -358, -169, -1609, 1135, -908, -1123, 468, 286, 1551, -736, 574, -1452, -118, -707, -105, 937, 705, 1573, 1200, -211, -1079, -221, -91, -1346, 1511, 1026, 341, 1488, -791, -1506, 367, -920, 1560, 1289, -1370, -332, -683, 1964, 116, -283, -512, 18, -530, 732, -1886, -181, -1303, -443, 406, 683, 254, -305, -1616, -1049, -1362, -459, -1683, 1940, -845, 1615, -1388, 979, 587, -1161, 291, -840, -1016, 253, 1321, 1768, -664, 542, 901, -384, 1631, -684, -1927, 661, -1349, 1769, -318, -334, -1767, 183, -1887, -1201, 303, 1680, -1023, -1534, 537, 363, -627, 1378, 445, 355, -1274, 1889, 725, -369, -287, -1317, -966, 1, -115, -16, 1332, 234, -29, -660, 1921, -64, -509, -741, 1664, 1649, 1959, 936, 254, 288, 1338, 1438, 988, 505, -1471, -695, -529, 129, 461, -55, -1033, -1150, 496, 991, -1103, -1326, -774, -731, 786, 1217, -623, 382, -375, 1284, 1607, 158, 521, 491, 1430, 1120, -357, 433, 1315, 102, 320, -57, 1216, 1601, -1103, 1372, 1227, -1182, 1175, -1990, 425, -103, -886, 590, -1757, 980, 128, -1115, 313, -251, 580, 1873, 1530, 500, -379, -356, -75, -1727, -313, -1026, -148, -1424, -422, -198, 1321, -1568, 1851, -1441, -485, -720, -68, 1877, -406, 808, -955, 121, 165, -680, -1327, 1753, -674, 1958, -1688, 491, 790, -1675, 700, 1050, -222, 1842, 1732, -103, 20, -1896, -187, -146, -85, -489, 1673, 254, -444, 120, -48, 1114, -1918, 870, -171, 417, -741, -810, 1884, -496, 1386, 1419, 633, -281, 1825, 744, -269, 710, -277, -1727, -1210, -205, 1354, -664, -1068, -1118, -1417, -653, 1797, -71, -824, -265, -498, -60, 1287, 116, 245, 598, -1459, -730, -1476, -1531, 611, -1647, 1999, -1949, -1181, -44, -1307, -1876, -1787, -1209, 142, -252, -355, -219, -314, 229, 772, 1099, 653, -1663, -344, 1412, 1875, 97, 848, 1972, -444, -1010, 1964, 285, -1392, -1248, 1420, -1966, 148, -476, 75, 143, -1781, -640, -645, 1541, -1823, -1602, 918, -1891, -1782, -1391, -1236, 189, -233, 425, 592, 1902, 1538, -1279, -700, 1424, -432, -512, -184, -1583, 424, 458, 41, -195, 1723, 1057, -1988, 1422, -447, 913, 1152, -262, 546, -1408, -859, 1772, 1275, 476, -1221, -1330, -338, -405, 1305, 1698, 621, -1010, -987, 334, 1353, -337, 1242, -738, 497, 1117, -672, 932, -356, -1134, 1410, 832, -1346, 1651, -1283, 1683, 1500, -494, -1506, 994, 1257, 419, -1684, -1236, 468, -1116, -825, 691, 976, 1267, 588, -1636, -1076, -368, -1487, 815, -1343, -779, 1770, 287, -1392, -28, -1576, 619, -48, -1832, 1565, -2, 74, -1582, -256, -292, -1599, -1996, 466, -1264, 522, -856, 1473, -277, -752, 1312, 506, 118, -853, 520, -152, 1695, -1272, 1169, 639, 901, -66, -1863, 1432, 1352, 1407, -1929, -932, 981, -106, -134, -167, 1596, 482, 851, -1176, -1620, 1244, -1716, 1913, 514, 293, 354, -901, 1781, 1556, -444, -1145, -434, 1786, 1750, -773, 1620, 488, -84, -161, 1830, -1049, 413, 1495, 308, -775, 1976, 698, -906, 1633, -278, 1203, -1804, 50, -1132, -138, -360, -1906, -839, 1939, -403, -971, -753, -1896, -882, 178, 205, 649, 573, -1106, -406, -1478, 1759, 1229, -1783, -1662, 141, 329, -1119, -1058, -26, -1280, 1670, 731, -117, -188, 427, 1536, 1519, -415, 1548, 888, 1593, 744, -992, -1231, -60, -125, 1362, -1649, -1007, 1666, 527, 751, -104, 1898, -936, -1969, 1791, 1249, 1324, -1608, -1181, 1866, 377, -1399, 1024, 909, -633, -466, -984, -627, -529, -724, 1695, 1512, -774, -1675, -1521, -20, -1566, 1212, -396, -552, -963, 1888, -1445, -391, 1084, 1606, 1873, -162, -1029, -1289, -805, -153, 1975, 1226, 1389, -379, -1140, 1636, 1235, -1260, -276, -335, 1500, -1996, 231, 1002, 431, -15, 1812, -911, 792, -1317, 643, -151, 1841, -954, -319, 180, 154, -932, -1708, 1686, 1801, -988, -1492, -1484}, 83},
}

func TestLongestSequenceNaive(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		want := res.Expected
		got := lengthOfLISNaive(res.Input)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkLongestSequenceNaive(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			lengthOfLISNaive(res.Input)
		}
	}
}

func TestLongestSequence(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		want := res.Expected
		got := lengthOfLIS(res.Input)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkLongestSequence(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			lengthOfLIS(res.Input)
		}
	}
}
