package problem0347

import (
	"fmt"
	"sort"
	"testing"

	"github.com/stretchr/testify/assert"
)

type Result struct {
	Input    []int
	K        int
	Expected []int
}

var Results = []Result{
	{[]int{1, 1, 1, 2, 2, 3}, 2, []int{1, 2}},
	{[]int{1}, 1, []int{1}},
	{[]int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 9, 12, 13, 14, 17, 18, 19, 23, 24, 26, 28, 29, 30, 33, 34, 42, 43, 45, 50, 51, 53, 56, 58, 59, 60, 61, 63, 66, 67, 68, 70, 72, 75, 76, 80, 81, 82, 84, 85, 86, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 106, 109, 112, 113, 114, 117, 118, 119, 120, 121, 122, 124, 126, 127, 129, 132, 134, 135, 141, 143, 145, 146, 148, 149, 151, 152, 160, 161, 164, 165, 167, 170, 176, 177, 181, 184, 187, 188, 190, 191, 194, 195, 197, 198, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 216, 217, 219, 221, 223, 224, 226, 227, 228, 229, 231, 234, 235, 236, 238, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 254, 255, 257, 258, 259, 261, 262, 263, 265, 267, 270, 271, 272, 274, 275, 277, 280, 282, 284, 289, 290, 291, 293, 295, 300, 302, 306, 307, 310, 311, 318, 322, 323, 325, 327, 329, 332, 333, 338, 341, 342, 345, 346, 347, 348, 353, 354, 355, 357, 360, 361, 362, 363, 366, 370, 371, 372, 374, 375, 377, 378, 384, 387, 389, 392, 394, 399, 401, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 422, 423, 427, 430, 431, 434, 435, 436, 438, 440, 441, 443, 446, 447, 449, 450, 451, 452, 453, 454, 459, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 481, 484, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 505, 506, 507, 508, 510, 511, 515, 516, 520, 523, 531, 532, 533, 536, 537, 538, 540, 543, 544, 546, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 564, 566, 567, 568, 569, 571, 572, 574, 575, 577, 580, 581, 582, 583, 585, 586, 587, 588, 591, 594, 596, 597, 598, 599, 602, 603, 605, 606, 607, 608, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 635, 636, 641, 643, 644, 645, 646, 650, 652, 655, 656, 657, 659, 660, 662, 663, 667, 668, 669, 670, 671, 673, 674, 678, 682, 686, 687, 690, 694, 697, 698, 700, 701, 703, 705, 706, 707, 709, 712, 713, 718, 719, 721, 722, 723, 727, 728, 731, 732, 734, 736, 737, 738, 740, 742, 744, 747, 750, 754, 755, 756, 757, 759, 762, 763, 764, 768, 769, 772, 773, 776, 777, 778, 779, 780, 781, 783, 785, 786, 787, 788, 790, 791, 792, 793, 794, 801, 808, 809, 810, 812, 813, 814, 816, 822, 826, 828, 829, 830, 832, 837, 839, 842, 844, 846, 848, 850, 851, 852, 856, 859, 860, 861, 862, 863, 868, 870, 877, 878, 880, 881, 883, 884, 885, 886, 893, 894, 895, 896, 897, 899, 900, 902, 903, 904, 905, 906, 907, 908, 910, 911, 913, 914, 915, 917, 919, 922, 923, 925, 926, 928, 929, 930, 932, 935, 936, 938, 943, 944, 945, 952, 955, 959, 961, 963, 964, 966, 971, 972, 973, 976, 977, 978, 980, 982, 985, 986, 987, 989, 991, 992, 993, 994, 997, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1013, 1016, 1021, 1022, 1023, 1024, 1026, 1027, 1029, 1031, 1033, 1034, 1040, 1041, 1046, 1047, 1050, 1051, 1055, 1057, 1061, 1062, 1066, 1068, 1071, 1072, 1073, 1076, 1077, 1079, 1080, 1081, 1083, 1085, 1086, 1088, 1089, 1092, 1094, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1106, 1108, 1110, 1111, 1112, 1113, 1117, 1118, 1124, 1128, 1130, 1131, 1134, 1141, 1145, 1146, 1150, 1151, 1154, 1155, 1157, 1160, 1161, 1163, 1164, 1170, 1173, 1174, 1175, 1176, 1185, 1187, 1189, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1208, 1209, 1214, 1219, 1220, 1222, 1223, 1224, 1231, 1232, 1235, 1238, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1251, 1255, 1262, 1263, 1265, 1268, 1271, 1272, 1274, 1278, 1280, 1282, 1283, 1285, 1286, 1287, 1288, 1291, 1293, 1294, 1296, 1297, 1298, 1302, 1303, 1305, 1306, 1307, 1310, 1319, 1321, 1322, 1323, 1325, 1326, 1328, 1331, 1333, 1334, 1336, 1338, 1339, 1340, 1342, 1344, 1345, 1346, 1348, 1349, 1350, 1352, 1356, 1358, 1359, 1361, 1362, 1368, 1369, 1370, 1372, 1373, 1375, 1376, 1377, 1379, 1380, 1382, 1386, 1387, 1388, 1389, 1391, 1392, 1393, 1397, 1399, 1403, 1404, 1407, 1408, 1410, 1411, 1412, 1414, 1415, 1417, 1420, 1421, 1422, 1423, 1426, 1432, 1433, 1436, 1438, 1439, 1440, 1441, 1444, 1447, 1450, 1451, 1452, 1453, 1457, 1458, 1462, 1463, 1466, 1469, 1470, 1471, 1472, 1473, 1474, 1478, 1479, 1481, 1487, 1488, 1489, 1490, 1493, 1494, 1495, 1496, 1499, 1500, 1501, 1502, 1503, 1504, 1508, 1509, 1510, 1511, 1512, 1518, 1519, 1520, 1524, 1525, 1527, 1528, 1529, 1531, 1533, 1534, 1539, 1543, 1544, 1546, 1548, 1550, 1553, 1554, 1557, 1559, 1561, 1562, 1565, 1566, 1567, 1568, 1569, 1575, 1576, 1577, 1579, 1580, 1583, 1585, 1590, 1591, 1593, 1594, 1595, 1597, 1600, 1601, 1602, 1604, 1605, 1606, 1607, 1613, 1614, 1618, 1622, 1623, 1625, 1627, 1630, 1631, 1633, 1635, 1639, 1641, 1642, 1643, 1647, 1648, 1650, 1651, 1652, 1654, 1655, 1660, 1663, 1666, 1668, 1669, 1670, 1672, 1673, 1674, 1675, 1678, 1680, 1684, 1687, 1691, 1696, 1698, 1704, 1705, 1706, 1711, 1712, 1713, 1716, 1717, 1721, 1723, 1729, 1730, 1731, 1732, 1736, 1738, 1740, 1744, 1745, 1746, 1748, 1749, 1750, 1751, 1752, 1753, 1761, 1763, 1767, 1769, 1770, 1774, 1775, 1776, 1777, 1778, 1781, 1782, 1786, 1789, 1790, 1794, 1795, 1797, 1798, 1799, 1801, 1804, 1808, 1810, 1812, 1815, 1818, 1819, 1820, 1824, 1826, 1827, 1829, 1830, 1833, 1835, 1838, 1839, 1841, 1842, 1843, 1844, 1845, 1846, 1849, 1850, 1851, 1852, 1856, 1865, 1867, 1872, 1873, 1876, 1879, 1880, 1882, 1883, 1884, 1887, 1889, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1899, 1900, 1901, 1902, 1906, 1908, 1909, 1910, 1912, 1915, 1918, 1919, 1920, 1922, 1926, 1928, 1929, 1932, 1934, 1936, 1937, 1938, 1940, 1942, 1949, 1951, 1953, 1955, 1956, 1958, 1961, 1963, 1964, 1965, 1966, 1968, 1972, 1973, 1975, 1976, 1977, 1978, 1979, 1980, 1988, 1990, 1991, 1992, 1993, 1994, 1998, 2000}, 4, []int{1, 2, 3, 4}},
}

func TestTopKElementsSort(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		want := res.Expected
		got := topKFrequentSort(res.Input, res.K)
		sort.Ints(got)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func TestTopKElementsBuckets(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		want := res.Expected
		got := topKFrequentBucket(res.Input, res.K)
		sort.Ints(got)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkTopKElementsBucket(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			topKFrequentBucket(res.Input, res.K)
		}
	}
}

func BenchmarkTopKElementsSort(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			topKFrequentSort(res.Input, res.K)
		}
	}
}

func TestTopKElementsHeap(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		want := res.Expected
		got := topKFrequentHeap(res.Input, res.K)
		sort.Ints(got)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkTopKElementsHeap(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			topKFrequentHeap(res.Input, res.K)
		}
	}
}
