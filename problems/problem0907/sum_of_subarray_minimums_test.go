package problem0907

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

type Result struct {
	Input    []int
	Expected int
}

var Results = []Result{
	{[]int{3, 1, 2, 4}, 17},
	{[]int{11, 81, 94, 43, 3}, 444},
	{[]int{1}, 1},
	{[]int{17606, 19728, 28479, 25484, 22472, 19751, 12526, 10158, 29256, 16474, 16112, 17060, 21249, 17436, 2234, 14796, 6962, 12291, 14438, 22588, 17320, 20640, 24233, 18056, 8141, 17949, 20253, 24239, 10257, 22539, 25675, 8422, 27814, 21399, 2314, 3643, 3356, 13999, 797, 15972, 27374, 1685, 18130, 18227, 18075, 9910, 22139, 1579, 21366, 13254, 1790, 20414, 2394, 29931, 12596, 7172, 13661, 17915, 1602, 2440, 12804, 22062, 16244, 2978, 6362, 6886, 12297, 27260, 7382, 17229, 21475, 15542, 16333, 5805, 23767, 4605, 20866, 1476, 17772, 15281, 18293, 10982, 27907, 2962, 13009, 473, 3861, 23822, 9074, 3990, 27994, 1186, 23364, 5368, 27146, 9560, 10071, 4142, 22922, 18376}, 10027551},
	{[]int{10507, 1831, 8530, 25385, 22404, 14949, 5918, 20503, 11493, 7668, 18427, 17580, 4234, 19403, 3036, 6205, 4370, 8407, 835, 11135, 27730, 813, 414, 22086, 16593, 29896, 23369, 26126, 22894, 29947, 4025, 13644, 17450, 4857, 27994, 16129, 18748, 26090, 25176, 2536, 10381, 1245, 26849, 14417, 4473, 9809, 10453, 21627, 155, 8205, 24763, 12316, 17396, 12481, 27215, 15537, 1448, 6168, 20105, 15347, 6531, 16233, 5327, 4642, 5471, 23922, 8336, 15358, 20115, 15834, 4036, 23160, 7722, 27921, 24005, 11026, 12079, 12256, 6841, 19728, 27796, 5543, 8002, 9550, 29955, 19156, 15130, 11069, 22935, 25876, 15420, 1075, 10336, 15980, 20865, 16144, 1264, 27603, 10739, 26525, 9784, 8092, 21100, 15815, 5142, 29636, 4308, 23659, 27260, 4886, 25845, 19496, 19616, 16459, 11617, 7059, 4347, 20954, 508, 10616, 4282, 23463, 27885, 29952, 12367, 5418, 6951, 25077, 21297, 2242, 18426, 26151, 4207, 17197, 19524, 22345, 4740, 20560, 8462, 27770, 3703, 17758, 22438, 11081, 23863, 14799, 21848, 4574, 23899, 16920, 21014, 18381, 7110, 14734, 25901, 27116, 9910, 11786, 8661, 27230, 10230, 5967, 17633, 21221, 7112, 3179, 27729, 19917, 28943, 1641, 18576, 12790, 9520, 2489, 12889, 4995, 8717, 27440, 10835, 21941, 5144, 24240, 22294, 4897, 11821, 28683, 21915, 8547, 7738, 11182, 29382, 17344, 17658, 5713, 7800, 21833, 17385, 5984, 27919, 12973, 23610, 29930, 16556, 15769, 18013, 7073, 13015, 10585, 28370, 5667, 20354, 17160, 17519, 6376, 26365, 2031, 10174, 23785, 24327, 10090, 28103, 3327, 6846, 3013, 963, 28852, 19241, 25873, 12658, 13834, 21626, 26131, 14926, 28980, 28165, 23624, 18904, 3392, 28262, 10915, 26263, 2052, 4271, 20799, 1329, 26881, 4778, 20305, 17324, 12531, 23302, 13158, 2209, 15058, 26868, 22740, 18030, 15061, 26957, 28705, 14361, 18971, 18710, 21653, 13488, 11334, 23341, 1847, 12591, 17930, 806, 8053, 9510, 17403, 14705, 14171, 18481, 24208, 19794, 22597, 27305, 10274, 7862, 11797, 13611, 27603, 12440, 23927, 5228, 7042, 53, 25390, 21495, 6025, 17160, 4165, 20371, 2720, 14463, 17402, 20103, 2718, 5317, 3392, 763, 28855, 21647, 27032, 16449, 24718, 18528, 13564, 5706, 4314, 9204, 28374, 3082, 884, 21023, 17959, 10036, 9554, 6883, 7694, 5882, 18425, 27375, 20437, 23308, 5635, 4989, 3913, 22476, 27845, 17004, 7743, 22542, 8746, 13750, 5468, 6149, 779, 27753, 1006, 26487, 1144, 26063, 19828, 20516, 23157, 1504, 22437, 15873, 1771, 16177, 5796, 28351, 20368, 17005, 22947, 23574, 17605, 11609, 16139, 567, 15180, 9259, 16168, 23870, 29982, 3339, 27744, 4348, 25086, 1555, 17856, 28588, 6613, 27458, 29604, 8873, 23597, 15141, 6298, 7790, 4236, 3077, 486, 24725, 28705, 6860, 24240, 5744, 16277, 19285, 15611, 17564, 23118, 13136, 9819, 22124, 17648, 10390, 1524, 26879, 16810, 21698, 2151, 6444, 9808, 25930, 5358, 17910, 23735, 14741, 3751, 18527, 9406, 3020, 19378, 5549, 21375, 26324, 25930, 12746, 17018, 17615, 15234, 8286, 17010, 7617, 10095, 4413, 24344, 22137, 2552, 26845, 24840, 10936, 1982, 2195, 28859, 12325, 5761, 29451, 5198, 780, 12026, 662, 24935, 11788, 11156, 6010, 20593, 21275, 15853, 4295, 18888, 15840, 5064, 19967, 23230, 25689, 26986, 26773, 3973, 6898, 4684, 11536, 8637, 23487, 4904, 8071, 11466, 5804, 21844, 29701, 29467, 28404, 14685, 12959, 21173, 26127, 19771, 2314, 10175, 28463, 19842, 9866, 103, 7687, 7842, 17384, 9405, 3516, 5428, 26647, 18297, 25389, 14061, 28162, 10940, 20082, 23177, 27831, 1715, 18342, 23161, 27217, 11137, 6689, 21118, 4105, 19281, 29722, 19192, 3554, 3011, 20328, 10985, 3193, 2374, 23152, 17266, 1264, 21867, 27555, 16333, 14525, 23264, 23907, 7495, 2232, 20427, 488, 27713, 15046, 16614, 20751, 9173, 12279, 95, 23863, 28630, 17583, 6202, 14180, 24342, 6283, 11997, 20572, 28464, 17172, 1352, 10404, 3901, 27989, 23285, 26213, 25543, 12074, 26332, 27316, 7430, 13670, 1590, 4762, 22180, 21504, 15914, 12202, 655, 14333, 23974, 12946, 29078, 20609, 10706, 13585, 15458, 7523, 18793, 12852, 7009, 4267, 11338, 14538, 24433, 8242, 3592, 15043, 26082, 23766, 9718, 22692, 12031, 19144, 4290, 21018, 17459, 5929, 16581, 21097, 24931, 11771, 8999, 10351, 22458, 4572, 24230, 12088, 25848, 1487, 18516, 24989, 17894, 3037, 7763, 14173, 16411, 2608, 632, 6419, 6828, 27470, 2489, 27857, 13528, 16461, 21809, 1367, 8279, 20321, 26040, 4802, 26524, 26885, 6175, 22993, 18049, 6397, 1498, 16403, 1555, 2022, 7813, 12352, 18005, 20843, 1757, 5303, 2680, 16028, 24620, 4020, 6267, 462, 19522, 28852, 28526, 13755, 6616, 13221, 12833, 28892, 20888, 106, 7392, 4993, 14118, 23043, 22147, 10391, 5211, 23198, 22350, 1815, 3985, 3479, 10442, 4500, 29298, 27437, 4678, 19429, 12126, 23362, 14877, 5472, 6060, 7692, 15247, 1697, 8260, 24304, 8281, 23394, 11032, 6754, 4267, 12145, 20816, 21973, 25153, 6871, 16594, 22435, 98, 20785, 15879, 3785, 8739, 15021, 14959, 6719, 15653, 9648, 17407, 28042, 6068, 2355, 19598, 4248, 3354, 24785, 6979, 27023, 14879, 20926, 13956, 7777, 25746, 21158, 22023, 12781, 20687, 12521, 5437, 1453, 3314, 28696, 24094, 28857, 7933, 17908, 3377, 16847, 14216, 19135, 2234, 17893, 17059, 16490, 18834, 26676, 7839, 12446, 26351, 23492, 25202, 29724, 8872, 9586, 4326, 11572, 3285, 5556, 5898, 26081, 1117, 12695, 14738, 9887, 3871, 3274, 22051, 9115, 6751, 29562, 1936, 19568, 13249, 23002, 23748, 2293, 13386, 25012, 19163, 8696, 16116, 20410, 27376, 14164, 9599, 12131, 16204, 4721, 6776, 26540, 23798, 2612, 27291, 26230, 29873, 13589, 25896, 22951, 11751, 117, 1708, 19400, 7414, 24466, 23630, 4987, 26809, 21646, 26036, 29477, 29508, 26434, 24870, 12858, 433, 23283, 26111, 20354, 27317, 25755, 7179, 2317, 18691, 16426, 14496, 10312, 13607, 7142, 21530, 10850, 20222, 6301, 27600, 11953, 2598, 27870, 29740, 16786, 21271, 3912, 7329, 14285, 28040, 28924, 5872, 6112, 25185, 10837, 3560, 922, 22638, 26914, 17689, 703, 21401, 28282, 8950, 10296, 3739, 2880, 14366, 5760, 364, 2798, 19994, 4640, 340, 10519, 582, 29685, 25321, 17401, 4752, 17386, 12246, 21045, 10045, 16557, 24412, 3228, 28142, 12283, 23540, 25888, 27390, 3522, 13467, 1891, 3473, 23190, 14218, 19523, 3491, 29123, 20064, 11406, 366, 12009, 16007, 1263, 2704, 522, 17858, 10599, 12465, 12485, 14913, 5634, 27460, 16340, 1944, 8701, 27822, 28203, 7687, 9291, 26051, 26771, 11388, 20674, 6674, 29206, 15321, 343, 5829, 21188, 28085, 3797, 17314, 1829, 21299, 23722, 2967, 27288, 5573, 17139, 27970, 10195, 16395, 2419, 14104, 473, 28371, 15628, 28975, 15600, 11901, 28931, 2948, 25185, 11816, 3563, 20866, 4503, 22043, 2386, 8092, 11324, 26936, 7072, 6172, 5797, 19224, 29410, 11116, 16432, 14965, 5030, 5640, 22185, 7745, 792, 7150, 28217, 29458, 19291, 4986, 25213, 1946, 23910, 16603, 14320, 21972, 908, 28779, 24117, 4573, 2546, 16787, 25778, 11473}, 153033688},
}

func TestSumOfMinSubarraysNaive(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		want := res.Expected
		got := sumSubarrayMinsNaive(res.Input)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkSumOfMinSubarraysNaive(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			sumSubarrayMinsNaive(res.Input)
		}
	}
}

func TestSumOfMinSubarrays(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		want := res.Expected
		got := sumSubarrayMins(res.Input)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkSumOfMinSubarrays(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			sumSubarrayMins(res.Input)
		}
	}
}
