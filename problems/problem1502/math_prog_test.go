package problem1502

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

type Result struct {
	Input    []int
	Expected bool
}

var Results = []Result{
	{[]int{3, 5, 1}, true},
	{[]int{1, 2, 4}, false},
	{[]int{18, -69, -48, 59, 60, 21, -93, -33, -96, -69, -84, -3, -26, 44, -22, 14, 74, -71, -99, -50, -79, -96, 36, 61, -28, 97, 24, -87, -75, -57, 94, -90, -72, 59, -74, 73, -26, 90, -16, 31, 16, 63, -83, -20, -22, 81, 20, 15, 88, -62, 14, -95, -83, 71, -38, -7, -29, 1, 28, 1, -94, -41, 54, 92, -65, -64, -43, 31, -74, 63, -36, -26, -66, 95, -77, -9, 34, 68, 100, -9, -96, 36, -43, -69, 73, 16, -93, -28, -97, -15, 18, 30, 59, -55, -82, -51, 58, -23, 90, -6, -88, 56, -62, -37, 30, 33, -82, -99, 22, 42, -98, 66, -59, -22, -89, -31, -87, 48, 7, -48, -69, -77, -2, 21, -55, -43, 71, -53, 27, -13, -44, -83, -70, -21, -19, -78, 63, 84, 17, 45, -3, -57, -93, -52, -4, 64, -17, 21, 78, -81, 100, 25, -46, 61, -82, 42, 35, -81, 91, -35, 95, -42, -18, -91, -9, -54, -25, -44, -53, -65, 61, -91, 57, -56, -8, -12, 12, -57, 83, 32, -22, 94, 90, -60, 34, -27, -48, -37, -2, 49, 93, -34, 78, 77, -25, 0, 34, 22, 63, 90}, false},
	{[]int{18, -69, -48, 59, 60, 21, -93, -33, -96, -69, -84, -3, -26, 44, -22, 14, 74, -71, -99, -50, -79, -96, 36, 61, -28, 97, 24, -87, -75, -57, 94, -90, -72, 59, -74, 73, -26, 90, -16, 31, 16, 63, -83, -20, -22, 81, 20, 15, 88, -62, 14, -95, -83, 71, -38, -7, -29, 1, 28, 1, -94, -41, 54, 92, -65, -64, -43, 31, -74, 63, -36, -26, -66, 95, -77, -9, 34, 68, 100, -9, -96, 36, -43, -69, 73, 16, -93, -28, -97, -15, 18, 30, 59, -55, -82, -51, 58, -23, 90, -6, -88, 56, -62, -37, 30, 33, -82, -99, 22, 42, -98, 66, -59, -22, -89, -31, -87, 48, 7, -48, -69, -77, -2, 21, -55, -43, 71, -53, 27, -13, -44, -83, -70, -21, -19, -78, 63, 84, 17, 45, -3, -57, -93, -52, -4, 64, -17, 21, 78, -81, 100, 25, -46, 61, -82, 42, 35, -81, 91, -35, 95, -42, -18, -91, -9, -54, -25, -44, -53, -65, 61, -91, 57, -56, -8, -12, 12, -57, 83, 32, -22, 94, 90, -60, 34, -27, -48, -37, -2, 49, 93, -34, 78, 77, -25, 0, 34, 22, 63, 90}, false},
	{[]int{18, -69, -48, 59, 60, 21, -93, -33, -96, -69, -84, -3, -26, 44, -22, 14, 74, -71, -99, -50, -79, -96, 36, 61, -28, 97, 24, -87, -75, -57, 94, -90, -72, 59, -74, 73, -26, 90, -16, 31, 16, 63, -83, -20, -22, 81, 20, 15, 88, -62, 14, -95, -83, 71, -38, -7, -29, 1, 28, 1, -94, -41, 54, 92, -65, -64, -43, 31, -74, 63, -36, -26, -66, 95, -77, -9, 34, 68, 100, -9, -96, 36, -43, -69, 73, 16, -93, -28, -97, -15, 18, 30, 59, -55, -82, -51, 58, -23, 90, -6, -88, 56, -62, -37, 30, 33, -82, -99, 22, 42, -98, 66, -59, -22, -89, -31, -87, 48, 7, -48, -69, -77, -2, 21, -55, -43, 71, -53, 27, -13, -44, -83, -70, -21, -19, -78, 63, 84, 17, 45, -3, -57, -93, -52, -4, 64, -17, 21, 78, -81, 100, 25, -46, 61, -82, 42, 35, -81, 91, -35, 95, -42, -18, -91, -9, -54, -25, -44, -53, -65, 61, -91, 57, -56, -8, -12, 12, -57, 83, 32, -22, 94, 90, -60, 34, -27, -48, -37, -2, 49, 93, -34, 78, 77, -25, 0, 34, 22, 63, 90}, false},
}

func TestArithmeticProgression(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		in := make([]int, len(res.Input))
		copy(in, res.Input)
		want := res.Expected
		got := canMakeArithmeticProgression(in)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkArithmeticProgression(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			in := make([]int, len(res.Input))
			copy(in, res.Input)
			canMakeArithmeticProgression(in)
		}
	}
}

func TestArithmeticProgressionOpt(t *testing.T) {
	assert := assert.New(t)

	for _, res := range Results {
		in := make([]int, len(res.Input))
		copy(in, res.Input)
		want := res.Expected
		got := canMakeArithmeticProgressionOpt(in)
		assert.Equal(want, got, fmt.Sprintf("%+v", res))
	}
}

func BenchmarkArithmeticProgressionOpt(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, res := range Results {
			in := make([]int, len(res.Input))
			copy(in, res.Input)
			canMakeArithmeticProgressionOpt(in)
		}
	}
}
